name: 🤖 Automated Trading Bot

on:
  schedule:
    # Run every 4 hours during market hours (UTC)
    - cron: '0 6,10,14,18,22 * * 1-5'  # Mon-Fri market hours
  workflow_dispatch:  # Manual trigger
    inputs:
      pairs:
        description: 'Trading pairs (comma-separated)'
        required: false
        default: 'XAUUSD,GBPUSD,USDJPY,AUDUSD'
      mode:
        description: 'Trading mode'
        required: false
        default: 'signals_only'
        type: choice
        options:
        - signals_only
        - hybrid_mode
        - drl_only

env:
  PYTHON_VERSION: '3.11'

jobs:
  trading_pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🕒 Check Market Status
      run: |
        python -c "
        import datetime
        import pytz
        
        # Check if markets are open (approximate)
        utc_now = datetime.datetime.now(pytz.UTC)
        weekday = utc_now.weekday()
        hour = utc_now.hour
        
        # Skip weekends
        if weekday >= 5:
            print('📴 Markets closed (weekend)')
            exit(78)  # Neutral exit code
            
        # Skip outside trading hours (very basic check)
        if hour < 6 or hour > 22:
            print('📴 Outside trading hours')
            exit(78)
            
        print('✅ Markets likely open - proceeding with trading')
        "
        
    - name: 📊 Download Market Data
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
      run: |
        echo "🔄 Downloading hourly market data..."
        python download_hourly_data.py
        
        echo "📈 Collecting training data..."
        python training_data_collection.py
        
    - name: 🧠 Train ML Models
      run: |
        echo "🎯 Training ensemble models..."
        python train_evaluate.py
        
    - name: 🚨 Generate Trading Signals
      env:
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
      run: |
        echo "⚡ Generating trading signals..."
        python signal_predictor.py > trading_signals_$(date +%Y%m%d_%H%M).txt
        
    - name: 🤖 Run Hybrid Trading System
      if: ${{ github.event.inputs.mode == 'hybrid_mode' || github.event.inputs.mode == 'drl_only' }}
      run: |
        echo "🧪 Running hybrid ML-DRL system..."
        python run_improved_hybrid_agent.py > hybrid_results_$(date +%Y%m%d_%H%M).txt || true
        
    - name: 📊 Generate Performance Report
      run: |
        echo "📈 Generating performance summary..."
        python -c "
        import datetime
        import os
        
        # Create simple performance report
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
        mode = '${{ github.event.inputs.mode }}' or 'signals_only'
        pairs = '${{ github.event.inputs.pairs }}' or 'XAUUSD,GBPUSD,USDJPY,AUDUSD'
        
        with open(f'performance_report_{datetime.datetime.now().strftime(\"%Y%m%d_%H%M\")}.txt', 'w') as f:
            f.write(f'Trading Bot Performance Report\\n')
            f.write(f'Generated: {timestamp}\\n')
            f.write(f'Mode: {mode}\\n')
            f.write(f'Pairs: {pairs}\\n')
            f.write(f'Status: Pipeline completed successfully\\n')
            
            # Check if model files exist
            if os.path.exists('models/'):
                models = [f for f in os.listdir('models/') if f.endswith('.pkl')]
                f.write(f'Models generated: {len(models)}\\n')
                for model in models:
                    f.write(f'  - {model}\\n')
        
        echo '✅ Performance report generated'
        "
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: trading-results-${{ github.run_number }}
        path: |
          trading_signals_*.txt
          hybrid_results_*.txt
          performance_report_*.txt
          models/*.pkl
        retention-days: 30
        
    - name: 🎯 Success Summary
      run: |
        echo "🎉 Trading bot pipeline completed successfully!"
        echo "📊 Artifacts uploaded with run number: ${{ github.run_number }}"
        echo "⏰ Next scheduled run: Check cron schedule"
        
    - name: 📧 Notify on Failure
      if: failure()
      run: |
        echo "❌ Trading bot run failed at $(date)"
        echo "🔍 Check the logs for details"
        echo "📋 Review the workflow configuration"
