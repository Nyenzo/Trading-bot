name: 📊 Automated Trading & Performance

on:
  schedule:
    # Run every weekday at market open times
    - cron: '0 8 * * 1-5'   # 8:00 UTC (London open)
    - cron: '0 13 * * 1-5'  # 13:00 UTC (New York open)
  workflow_dispatch:
    inputs:
      episodes:
        description: 'Number of trading episodes'
        required: false
        default: '10'
      demo_mode:
        description: 'Run in demo mode'
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  trading-session:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔑 Set up environment variables
      run: |
        echo "ALPHA_VANTAGE_API_KEY=${{ secrets.ALPHA_VANTAGE_API_KEY }}" >> .env
        echo "NEWS_API_KEY=${{ secrets.NEWS_API_KEY }}" >> .env
        echo "FRED_API_KEY=${{ secrets.FRED_API_KEY }}" >> .env
      if: ${{ !github.event.inputs.demo_mode }}

    - name: 📊 Collect fresh data
      run: |
        python data_collection.py
      continue-on-error: true
      if: ${{ !github.event.inputs.demo_mode }}

    - name: 🤖 Run trading session
      run: |
        episodes=${{ github.event.inputs.episodes || '10' }}
        demo_flag=""
        if [ "${{ github.event.inputs.demo_mode || 'true' }}" = "true" ]; then
          demo_flag="--demo"
        fi
        python run_improved_hybrid_agent.py $demo_flag --episodes $episodes > trading_results.txt 2>&1

    - name: 📊 Extract performance metrics
      run: |
        python -c "
        import re
        
        with open('trading_results.txt', 'r') as f:
            content = f.read()
        
        # Extract metrics using regex
        avg_reward = re.search(r'Average reward: ([-\d.]+)', content)
        win_rate = re.search(r'Win rate: ([\d.]+)%', content)
        best_episode = re.search(r'Best episode: ([-\d.]+)', content)
        worst_episode = re.search(r'Worst episode: ([-\d.]+)', content)
        
        metrics = {}
        if avg_reward: metrics['avg_reward'] = float(avg_reward.group(1))
        if win_rate: metrics['win_rate'] = float(win_rate.group(1))
        if best_episode: metrics['best_episode'] = float(best_episode.group(1))
        if worst_episode: metrics['worst_episode'] = float(worst_episode.group(1))
        
        # Save to GitHub output
        import os
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            for key, value in metrics.items():
                f.write(f'{key}={value}\n')
        
        print(f'Extracted metrics: {metrics}')
        " || echo "Failed to extract metrics"

    - name: 📈 Update performance tracking
      run: |
        mkdir -p performance_logs
        echo '{
          \"timestamp\": \"$(date -Iseconds)\",
          \"avg_reward\": \"${{ steps.extract.outputs.avg_reward || 0 }}\",
          \"win_rate\": \"${{ steps.extract.outputs.win_rate || 0 }}\",
          \"best_episode\": \"${{ steps.extract.outputs.best_episode || 0 }}\",
          \"worst_episode\": \"${{ steps.extract.outputs.worst_episode || 0 }}\",
          \"demo_mode\": \"${{ github.event.inputs.demo_mode || 'true' }}\",
          \"episodes\": \"${{ github.event.inputs.episodes || '10' }}\"
        }' >> performance_logs/$(date +%Y%m%d_%H%M%S).json

    - name: 📤 Upload trading results
      uses: actions/upload-artifact@v3
      with:
        name: trading-results-${{ github.run_number }}
        path: |
          trading_results.txt
          performance_logs/
        retention-days: 30

    - name: 🚨 Notify on poor performance
      if: steps.extract.outputs.win_rate != '' && steps.extract.outputs.win_rate < 30
      run: |
        echo "⚠️ Warning: Win rate below 30% (${{ steps.extract.outputs.win_rate }}%)"
        echo "Consider retraining the model or checking market conditions"

    - name: 🎉 Celebrate good performance  
      if: steps.extract.outputs.win_rate != '' && steps.extract.outputs.win_rate > 60
      run: |
        echo "🎉 Excellent performance! Win rate: ${{ steps.extract.outputs.win_rate }}%"
        echo "🚀 Consider increasing position sizes or trading frequency"

  weekly-retrain:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 8 * * 1'  # Only on Monday 8:00 UTC
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📊 Download fresh historical data
      run: |
        python download_hourly_data.py
      continue-on-error: true

    - name: 🤖 Retrain ML models
      run: |
        python train_evaluate.py
      continue-on-error: true

    - name: 🧠 Retrain DRL agent (quick training)
      run: |
        # Quick retraining with fewer timesteps
        python -c "
        from train_improved_hybrid_agent import train_improved_hybrid_agent
        train_improved_hybrid_agent(total_timesteps=25000)
        "
      continue-on-error: true

    - name: 📤 Upload retrained models
      uses: actions/upload-artifact@v3
      with:
        name: retrained-models-${{ github.run_number }}
        path: models/
        retention-days: 90

  market-analysis:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 13 * * 1-5'  # Only during NY open
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 📊 Generate market signals
      run: |
        python signal_predictor.py > market_signals.txt 2>&1
      continue-on-error: true

    - name: 📈 Create market report
      run: |
        echo "# 📊 Market Analysis Report" > market_report.md
        echo "Generated: $(date)" >> market_report.md
        echo "" >> market_report.md
        echo "## Trading Signals" >> market_report.md
        cat market_signals.txt >> market_report.md 2>/dev/null || echo "No signals generated" >> market_report.md

    - name: 📤 Upload market analysis
      uses: actions/upload-artifact@v3
      with:
        name: market-analysis-${{ github.run_number }}
        path: |
          market_signals.txt
          market_report.md
        retention-days: 7
