name: 🚀 Build and Release Trading Bot

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: TradingBot.exe
            asset_name: TradingBot-Windows-x64.exe
          - os: ubuntu-latest  
            artifact_name: TradingBot
            asset_name: TradingBot-Linux-x64
          - os: macos-latest
            artifact_name: TradingBot
            asset_name: TradingBot-macOS-x64

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: 🔧 Create build spec
      run: python create_build_spec.py

    - name: 🏗️ Build executable
      run: |
        pyinstaller trading_bot.spec --clean --noconfirm
      
    - name: 📋 List build outputs (Debug)
      run: |
        ls -la dist/
      shell: bash

    - name: 🧪 Test executable (Windows)
      if: runner.os == 'Windows'
      run: |
        cd dist
        ./TradingBot.exe trade --demo --episodes 1
      shell: bash
      continue-on-error: true

    - name: 🧪 Test executable (Unix)
      if: runner.os != 'Windows'
      run: |
        cd dist
        chmod +x TradingBot
        ./TradingBot trade --demo --episodes 1
      continue-on-error: true

    - name: 📦 Create release package
      run: |
        mkdir release
        cp dist/${{ matrix.artifact_name }} release/
        cp README.md release/
        cp EXECUTION_GUIDE.md release/
        cp requirements.txt release/
        cp -r models release/ 2>/dev/null || echo "Models directory not found"
        cp -r historical_data release/ 2>/dev/null || echo "Historical data not found"
      shell: bash

    - name: 🗜️ Create archive
      run: |
        cd release
        if [ "${{ runner.os }}" = "Windows" ]; then
          7z a ../${{ matrix.asset_name }}.zip *
        else
          tar -czf ../${{ matrix.asset_name }}.tar.gz *
        fi
      shell: bash

    - name: 📤 Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.zip
          ${{ matrix.asset_name }}.tar.gz
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download artifacts
      uses: actions/download-artifact@v3

    - name: 📋 List artifacts
      run: find . -name "*.zip" -o -name "*.tar.gz" | head -10

    - name: 🏷️ Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Trading Bot ${{ github.ref_name }}
        body: |
          🤖 **Hybrid ML-DRL Trading Bot Release ${{ github.ref_name }}**
          
          ## 🚀 What's New
          - ✅ Hybrid ML-DRL trading system
          - ✅ Multi-pair trading (XAUUSD, GBPUSD, USDJPY, AUDUSD)
          - ✅ Real-time market data integration
          - ✅ Advanced technical analysis
          - ✅ 40%+ win rate in backtesting
          
          ## 📦 Downloads
          - **Windows**: TradingBot-Windows-x64.exe.zip
          - **Linux**: TradingBot-Linux-x64.tar.gz  
          - **macOS**: TradingBot-macOS-x64.tar.gz
          
          ## 🚀 Quick Start
          1. Download the appropriate package for your OS
          2. Extract the archive
          3. Run: `./TradingBot trade --demo --episodes 5`
          
          ## 📚 Documentation
          - See EXECUTION_GUIDE.md for detailed usage
          - Check README.md for setup instructions
          
          ## ⚠️ Requirements
          - Internet connection for market data
          - API keys for live data (see .env.example)
          - Minimum 4GB RAM recommended
          
          ## 🆘 Support
          - 📖 Documentation: Check included guides
          - 🐛 Issues: Open an issue on GitHub
          - 💬 Discussions: Use GitHub Discussions
          
          **Happy Trading! 📈**
        draft: false
        prerelease: false
        files: |
          TradingBot-Windows-x64/*.zip
          TradingBot-Linux-x64/*.tar.gz
          TradingBot-macOS-x64/*.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

  deploy-demo:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Run tests
      run: |
        python run_improved_hybrid_agent.py --demo --episodes 1
      continue-on-error: true

    - name: 📊 Generate performance report
      run: |
        echo "## 📊 Latest Performance Report" > performance_report.md
        echo "Generated on: $(date)" >> performance_report.md
        echo "" >> performance_report.md
        python -c "
        from run_improved_hybrid_agent import run_improved_hybrid_agent
        import json
        rewards = run_improved_hybrid_agent(demo_mode=True, episodes=10)
        stats = {
            'avg_reward': sum(rewards)/len(rewards),
            'win_rate': len([r for r in rewards if r > 0])/len(rewards)*100,
            'best_episode': max(rewards),
            'worst_episode': min(rewards)
        }
        print(f'Average Reward: {stats[\"avg_reward\"]:.2f}')
        print(f'Win Rate: {stats[\"win_rate\"]:.1f}%')
        print(f'Best Episode: {stats[\"best_episode\"]:.2f}')
        print(f'Worst Episode: {stats[\"worst_episode\"]:.2f}')
        " >> performance_report.md

    - name: 📤 Update README with performance
      run: |
        # Could update README with latest performance metrics
        echo "Performance report generated"
